def edit_dis(s1, s2): 
    m = len(s1) 
    n = len(s2) 

    # Initialize the DP table with dimensions (m+1) x (n+1)
    dp = [[0] * (n + 1) for _ in range(m + 1)] 

    # Base case: Transform empty string to s2 or vice versa
    for i in range(m + 1): 
        dp[i][0] = i  # Cost of deleting all characters from s1
    for j in range(n + 1): 
        dp[0][j] = j  # Cost of inserting all characters into s1

    # Fill the DP table
    for i in range(1, m + 1): 
        for j in range(1, n + 1): 
            if s1[i - 1] == s2[j - 1]:  # If characters match, no edit is required
                dp[i][j] = dp[i - 1][j - 1] 
            else:  # Otherwise, take the minimum of insert, delete, or replace
                dp[i][j] = 1 + min(dp[i - 1][j],      # Deletion
                                   dp[i][j - 1],      # Insertion
                                   dp[i - 1][j - 1])  # Replacement

    return dp[m][n] 

# Get input strings from user
s1 = input("Enter the first string: ") 
s2 = input("Enter the second string: ") 

# Calculate the edit distance
distance = edit_dis(s1, s2) 

# Output the result
print(f"The edit distance between '{s1}' and '{s2}' is {distance}.")
